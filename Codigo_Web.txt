import CoinKey from 'coinkey';
import secp256k1 from 'secp256k1';

const prefix = "00000000000000000000000000000000";
const characters = '0123456789abcdef';

const targetWallets = [
    '1Pie8JkxBT6MGPz9Nvi3fsPkr2D8q3GBc1',
    '1ErZWg5cFCe4Vw5BzgfzB74VNLaXEiEkhk',
    '1QCbW9HWnwQWiQqVo5exhAnmfqKRrCRsvW',
    '1BDyrQ6WoF8VN3g9SAS1iKZcPzFfnDVieY'
];

let chaves_analisadas = 0;
let pausa_loop = false;

function gerarChaveAleatoria() {
    let randomHex = '';
    for (let i = 0; i < 32; i++) { // Gerando uma chave de 32 caracteres hexadecimais
        const randomIndex = Math.floor(Math.random() * characters.length);
        randomHex += characters[randomIndex];
    }
    return prefix + randomHex;
}

function generatePublic(privateKey) {
    let buffer = Buffer.from(privateKey, 'hex');
    let _key = new CoinKey(buffer);
    _key.compressed = true;

    if (!secp256k1.privateKeyVerify(buffer)) {
        console.log(`Chave privada inválida: ${privateKey}`);
        return null; 
    }

    try {
        _key._publicKey = secp256k1.publicKeyCreate(_key.privateKey, _key.compressed);
    } catch (error) {
        console.log(`Erro ao gerar chave pública para ${privateKey}: ${error.message}`);
        return null;
    }

    if (targetWallets.includes(_key.publicAddress)) {
        pausa_loop = true;
        console.log(`Chave privada encontrada para carteira desejada: ${privateKey}`);
        return _key.publicAddress + ' <<<<---------- Carteira de 32 bits  ----------';
    } else {
        chaves_analisadas++;
        return _key.publicAddress;
    }
}

const inicioTempo = Date.now();
let rodadas = 0;

while (!pausa_loop && chaves_analisadas < 1000) { // Limite de 1000 chaves analisadas
    let keysArray = Array.from({ length: 60 }, () => gerarChaveAleatoria());

    console.log(`\n\n|-----------------------------------------------------by-CchyNnAa---|`);
    console.log(`|   -------------------BEM-VINDO-LOOP-MENU------------------------- |`);
    console.log(`|    -----Rodada-${rodadas}-----------------------------------------------`);
    console.log(`|   A CARTEIRA DESEJADA É -->> 1HsMJxNiV7TLxmoF6uJNkydxPFDog4NQum   |`);
    console.log(`|   >>Chaves_Analisadas>> : ${chaves_analisadas}                         |`);
    
    keysArray.forEach((keyHex, index) => {
        console.log(`|   Possibilidade Carteira ${index + 1}: ${generatePublic(keyHex)}    |`);
    });

    rodadas++;
}

const fimTempo = Date.now();
const tempoTotal = (fimTempo - inicioTempo) / 1000; 
console.log(`\n\nO loop rodou por ${tempoTotal} segundos.`);

if (pausa_loop) {
    console.log('\n !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CARTEIRA ENCONTRADA!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \n ______\n|      | \n|OOPS! |\n|WALLET|\n|FOUND!|\n|______|');
}


__________________________________________________________

resolve erro:
if (!secp256k1.privateKeyVerify(buffer)) {
        console.log(`ERROR AO CRIAR CHAVE: ${privateKey}`);
        return null; 
    }
